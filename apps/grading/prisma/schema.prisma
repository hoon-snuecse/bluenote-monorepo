generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Assignment {
  id                String       @id @default(cuid())
  title             String
  schoolName        String
  gradeLevel        String
  writingType       String
  evaluationDomains Json
  evaluationLevels  Json
  levelCount        Int
  gradingCriteria   String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  submissions       Submission[]

  @@index([schoolName])
  @@index([createdAt])
}

model Submission {
  id           String       @id @default(cuid())
  assignmentId String
  studentName  String
  studentId    String
  content      String
  submittedAt  DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  studentDbId  String?
  documentPath String?      /// Google Drive URL 저장
  sourceType   String       @default("MANUAL") /// "MANUAL" | "GOOGLE_DRIVE"
  evaluations  Evaluation[]
  assignment   Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([studentId])
  @@index([studentDbId])
  @@index([submittedAt])
}

model Evaluation {
  id                     String     @id @default(cuid())
  submissionId           String
  assignmentId           String
  studentId              String
  domainEvaluations      Json
  overallLevel           String
  overallFeedback        String
  improvementSuggestions Json
  strengths              Json
  evaluatedAt            DateTime   @default(now())
  evaluatedBy            String?    // AI 모델명
  evaluatedByUser        String?    // 평가한 사용자 이메일
  studentDbId            String?
  submission             Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([studentDbId])
  @@index([evaluatedAt])
  @@index([evaluatedByUser])
}

model AccessToken {
  id           String   @id @default(cuid())
  token        String   @unique
  evaluationId String
  studentId    String
  expiresAt    DateTime
  used         Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([expiresAt])
}

model EvaluationTemplate {
  id                String   @id @default(cuid())
  name              String
  writingType       String
  gradeLevel        String
  evaluationDomains Json
  evaluationLevels  Json
  criteriaTemplate  String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([writingType])
  @@index([gradeLevel])
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  encrypted Boolean  @default(false)
  updatedAt DateTime @updatedAt
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        UserRole  @default(TEACHER)
  schoolName  String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([email])
  @@index([schoolName])
}

model google_tokens {
  user_email    String    @id
  access_token  String
  refresh_token String?
  token_type    String?   @default("Bearer")
  expires_at    DateTime? @db.Timestamptz(6)
  scope         String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_email], map: "idx_google_tokens_user_email")
}

enum UserRole {
  TEACHER
  ADMIN
  STUDENT
}
